/**
 * YAUSMA API Client - Browser Compatible
 * Converted from ES6 class to browser-compatible JavaScript
 * 
 * The version of the OpenAPI document: 0.1.0
 * 
 * NOTE: This was auto generated by OpenAPI Generator and converted for browser compatibility.
 * https://openapi-generator.tech
 */

/**
 * API Client for handling HTTP requests
 * @param {String} basePath - Base URL for API calls (default: auto-detected)
 */
function ApiClient(basePath) {
    // Auto-detect API base URL based on environment
    if (!basePath) {
        basePath = ApiClient.getDefaultBasePath();
    }
    this.basePath = basePath.replace(/\/+$/, '');
    this.defaultHeaders = {
        'User-Agent': 'YAUSMA-Client/1.0.0'
    };
    this.timeout = 60000;
    this.authentications = {};
    this.cache = true;
    this.enableCookies = false;
    this.requestAgent = null;
    this.plugins = null;
}

/**
 * Returns a string representation for an actual parameter.
 * @param param The actual parameter.
 * @returns {String} The string representation of param.
 */
ApiClient.prototype.paramToString = function(param) {
    if (param == undefined || param == null) {
        return '';
    }
    if (param instanceof Date) {
        return param.toJSON();
    }
    if (ApiClient.canBeJsonified(param)) {
        return JSON.stringify(param);
    }
    return param.toString();
};

/**
 * Returns a boolean indicating if the parameter could be JSON.stringified
 * @param param The actual parameter
 * @returns {Boolean} Flag indicating if param can be JSON.stringified
 */
ApiClient.canBeJsonified = function(str) {
    if (typeof str !== 'string' && typeof str !== 'object') return false;
    try {
        var type = str.toString();
        return type === '[object Object]' || type === '[object Array]';
    } catch (err) {
        return false;
    }
};

/**
 * Builds full URL by appending the given path to the base URL
 * @param {String} path The path to append to the base URL.
 * @param {Object} pathParams The parameter values to append.
 * @param {String} apiBasePath Base path defined in the path, operation level to override the default one
 * @returns {String} The encoded path with parameter values substituted.
 */
ApiClient.prototype.buildUrl = function(path, pathParams, apiBasePath) {
    if (!path.match(/^\//)) {
        path = '/' + path;
    }
    
    var url = this.basePath + path;
    
    // use API (operation, path) base path if defined
    if (apiBasePath !== null && apiBasePath !== undefined) {
        url = apiBasePath + path;
    }
    
    if (pathParams) {
        url = url.replace(/\{([\w-\.#]+)\}/g, function(fullMatch, key) {
            var value;
            if (pathParams.hasOwnProperty(key)) {
                value = this.paramToString(pathParams[key]);
            } else {
                value = fullMatch;
            }
            return encodeURIComponent(value);
        }.bind(this));
    }
    
    return url;
};

/**
 * Checks whether the given content type represents JSON.
 * @param {String} contentType The MIME content type to check.
 * @returns {Boolean} true if contentType represents JSON, otherwise false.
 */
ApiClient.prototype.isJsonMime = function(contentType) {
    return Boolean(contentType != null && contentType.match(/^application\/json(;.*)?$/i));
};

/**
 * Chooses a content type from the given array, with JSON preferred
 * @param {Array} contentTypes
 * @returns {String} The chosen content type, preferring JSON.
 */
ApiClient.prototype.jsonPreferredMime = function(contentTypes) {
    for (var i = 0; i < contentTypes.length; i++) {
        if (this.isJsonMime(contentTypes[i])) {
            return contentTypes[i];
        }
    }
    return contentTypes[0];
};

/**
 * Checks whether the given parameter value represents file-like content.
 * @param param The parameter to check.
 * @returns {Boolean} true if param represents a file.
 */
ApiClient.prototype.isFileParam = function(param) {
    // Blob in browser
    if (typeof Blob === 'function' && param instanceof Blob) {
        return true;
    }
    // File in browser
    if (typeof File === 'function' && param instanceof File) {
        return true;
    }
    return false;
};

/**
 * Normalizes parameter values
 * @param {Object} params The parameters as object properties.
 * @returns {Object} normalized parameters.
 */
ApiClient.prototype.normalizeParams = function(params) {
    var newParams = {};
    if (params) {
        for (var key in params) {
            if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {
                newParams[key] = this.paramToString(params[key]);
            }
        }
    }
    return newParams;
};

/**
 * Builds a string representation of an array-type actual parameter, according to the given collection format.
 * @param {Array} param An array parameter.
 * @param {String} collectionFormat The array element separator strategy.
 * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter.
 */
ApiClient.prototype.buildCollectionParam = function(param, collectionFormat) {
    if (param == null) {
        return null;
    }
    switch (collectionFormat) {
        case 'csv':
            return param.map(this.paramToString, this).join(',');
        case 'ssv':
            return param.map(this.paramToString, this).join(' ');
        case 'tsv':
            return param.map(this.paramToString, this).join('\t');
        case 'pipes':
            return param.map(this.paramToString, this).join('|');
        case 'multi':
            return param.map(this.paramToString, this);
        case 'passthrough':
            return param;
        default:
            throw new Error('Unknown collection format: ' + collectionFormat);
    }
};

/**
 * Applies authentication headers to the request.
 * @param {Object} request The request object created by a superagent() call.
 * @param {Array} authNames An array of authentication method names.
 */
ApiClient.prototype.applyAuthToRequest = function(request, authNames) {
    for (var i = 0; i < authNames.length; i++) {
        var authName = authNames[i];
        var auth = this.authentications[authName];
        if (auth) {
            switch (auth.type) {
                case 'basic':
                    if (auth.username || auth.password) {
                        request.auth(auth.username || '', auth.password || '');
                    }
                    break;
                case 'bearer':
                    if (auth.accessToken) {
                        var localVarBearerToken = typeof auth.accessToken === 'function'
                          ? auth.accessToken()
                          : auth.accessToken;
                        request.set({'Authorization': 'Bearer ' + localVarBearerToken});
                    }
                    break;
                case 'apiKey':
                    if (auth.apiKey) {
                        var data = {};
                        if (auth.apiKeyPrefix) {
                            data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;
                        } else {
                            data[auth.name] = auth.apiKey;
                        }
                        if (auth['in'] === 'header') {
                            request.set(data);
                        } else {
                            request.query(data);
                        }
                    }
                    break;
                case 'oauth2':
                    if (auth.accessToken) {
                        request.set({'Authorization': 'Bearer ' + auth.accessToken});
                    }
                    break;
                default:
                    throw new Error('Unknown authentication type: ' + auth.type);
            }
        }
    }
};

/**
 * Deserializes an HTTP response body into a value of the specified type.
 * @param {Object} response A SuperAgent response object.
 * @param {*} returnType The type to return.
 * @returns A value of the specified type.
 */
ApiClient.prototype.deserialize = function(response, returnType) {
    if (response == null || returnType == null || response.status == 204) {
        return null;
    }

    var data = response.body;
    if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {
        data = response.text;
    }

    return ApiClient.convertToType(data, returnType);
};

   /**
    * Callback function to receive the result of the operation.
    * @callback module:ApiClient~callApiCallback
    * @param {String} error Error message, if any.
    * @param data The data returned by the service call.
    * @param {String} response The complete HTTP response.
    */

/**
 * Execute an API call using superagent
 * @param {String} path - API endpoint path
 * @param {String} httpMethod - HTTP method (GET, POST, etc.)
 * @param {Object} pathParams - Path parameters
 * @param {Object} queryParams - Query parameters
 * @param {Object} headerParams - Header parameters
 * @param {Object} formParams - Form parameters
 * @param {Object} bodyParam - Request body
 * @param {Array} authNames - Authentication names
 * @param {Array} contentTypes - Content types
 * @param {Array} accepts - Accept types
 * @param {*} returnType - Return type
 * @param {String} apiBasePath - API base path
 * @param {Function} callback - Callback function(error, data, response)
 */
ApiClient.prototype.callApi = function(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, returnType, apiBasePath, callback) {
    var url = this.buildUrl(path, pathParams, apiBasePath);
    var request = superagent(httpMethod.toUpperCase(), url);

    // Set headers
    request.set(this.defaultHeaders);
    if (headerParams) {
        request.set(this.normalizeParams(headerParams));
    }

    // Set query parameters
    if (queryParams) {
        if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {
            queryParams['_'] = new Date().getTime();
        }
        request.query(this.normalizeParams(queryParams));
    }

    // Set timeout
    request.timeout(this.timeout);

    // Set content type
    var contentType = this.jsonPreferredMime(contentTypes || []);
    if (contentType && contentType !== 'multipart/form-data') {
        request.type(contentType);
    }

    // Set body for POST requests
    if (bodyParam !== null && bodyParam !== undefined) {
        if (!request.header['Content-Type']) {
            request.type('application/json');
        }
        request.send(bodyParam);
    }

    // Set accept header
    var accept = this.jsonPreferredMime(accepts || []);
    if (accept) {
        request.accept(accept);
    }

    // Execute request
    request.end(function(error, response) {
        var data = null;
        
        if (!error) {
            try {
                data = this.deserialize(response, returnType);
            } catch (err) {
                error = err;
            }
        }

        if (callback) {
            callback(error, data, response);
        }
    }.bind(this));

    return request;
};

/**
 * Parses an ISO-8601 string representation or epoch representation of a date value.
 * @param {String} str The date value as a string.
 * @returns {Date} The parsed date object.
 */
ApiClient.parseDate = function(str) {
    if (isNaN(str)) {
        return new Date(str.replace(/(\d)(T)(\d)/i, '$1 $3'));
    }
    return new Date(+str);
};

/**
 * Converts a value to the specified type.
 * @param {*} data The data to convert, as a string or object.
 * @param {*} type The type to return.
 * @returns An instance of the specified type or null or undefined if data is null or undefined.
 */
ApiClient.convertToType = function(data, type) {
    if (data === null || data === undefined) {
        return data;
    }

    switch (type) {
        case 'Boolean':
            return Boolean(data);
        case 'Integer':
            return parseInt(data, 10);
        case 'Number':
            return parseFloat(data);
        case 'String':
            return String(data);
        case 'Date':
            return ApiClient.parseDate(String(data));
        case 'Blob':
            return data;
        default:
            if (type === Object) {
                return data;
            } else if (typeof type === 'function' && typeof type.constructFromObject === 'function') {
                return type.constructFromObject(data);
            } else if (Array.isArray(type)) {
                var itemType = type[0];
                return data.map(function(item) {
                    return ApiClient.convertToType(item, itemType);
                });
            } else if (typeof type === 'object') {
                var keyType, valueType;
                for (var k in type) {
                    if (type.hasOwnProperty(k)) {
                        keyType = k;
                        valueType = type[k];
                        break;
                    }
                }
                var result = {};
                for (var k in data) {
                    if (data.hasOwnProperty(k)) {
                        var key = ApiClient.convertToType(k, keyType);
                        var value = ApiClient.convertToType(data[k], valueType);
                        result[key] = value;
                    }
                }
                return result;
            } else {
                return data;
            }
    }
};

/**
 * Gets the default base path for API calls based on environment
 * @returns {String} The default base path
 */
ApiClient.getDefaultBasePath = function() {
    // Check if running in production (https://yausma.org)
    if (typeof window !== 'undefined' && window.location) {
        var hostname = window.location.hostname;
        var protocol = window.location.protocol;
        
        // Debug logging
        console.log('[ApiClient] Environment detection:', {
            hostname: hostname,
            protocol: protocol,
            href: window.location.href
        });
        
        if (hostname === 'yausma.org' || hostname === 'www.yausma.org') {
            // Production environment
            var basePath = protocol + '//' + hostname + '/api';
            console.log('[ApiClient] Production environment detected, using:', basePath);
            return basePath;
        } else if (hostname === 'localhost' || hostname === '127.0.0.1') {
            // Development environment
            console.log('[ApiClient] Development environment detected, using: http://localhost:8000');
            return 'http://localhost:8000';
        } else {
            // Other environments (staging, etc.)
            var basePath = protocol + '//' + hostname + '/api';
            console.log('[ApiClient] Other environment detected, using:', basePath);
            return basePath;
        }
    }
    
    // Fallback for non-browser environments
    console.log('[ApiClient] Fallback environment, using: http://localhost:8000');
    return 'http://localhost:8000';
};

/**
 * Gets an array of host settings
 * @returns An array of host settings
 */
ApiClient.prototype.hostSettings = function() {
    return [
        {
          'url': "",
          'description': "No description provided"
        }
    ];
};

ApiClient.prototype.getBasePathFromSettings = function(index, variables) {
    variables = variables || {};
    var servers = this.hostSettings();

    // check array index out of bound
    if (index < 0 || index >= servers.length) {
        throw new Error("Invalid index " + index + " when selecting the host settings. Must be less than " + servers.length);
    }

    var server = servers[index];
    var url = server['url'];

    // go through variable and assign a value
    if (server['variables']) {
        for (var variable_name in server['variables']) {
            if (variable_name in variables) {
                var variable = server['variables'][variable_name];
                if (!('enum_values' in variable) || variable['enum_values'].includes(variables[variable_name])) {
                    url = url.replace("{" + variable_name + "}", variables[variable_name]);
                } else {
                    throw new Error("The variable `" + variable_name + "` in the host URL has invalid value " + variables[variable_name] + ". Must be " + server['variables'][variable_name]['enum_values'] + ".");
                }
            } else {
                // use default value
                url = url.replace("{" + variable_name + "}", server['variables'][variable_name]['default_value']);
            }
        }
    }
    return url;
};

/**
 * Constructs a new map or array model from REST data.
 * @param data {Object|Array} The REST data.
 * @param obj {Object|Array} The target object or array.
 * @param itemType The type of items
 */
ApiClient.constructFromObject = function(data, obj, itemType) {
    if (Array.isArray(data)) {
        for (var i = 0; i < data.length; i++) {
            if (data.hasOwnProperty(i))
                obj[i] = ApiClient.convertToType(data[i], itemType);
        }
    } else {
        for (var k in data) {
            if (data.hasOwnProperty(k))
                obj[k] = ApiClient.convertToType(data[k], itemType);
        }
    }
};

/**
 * Enumeration of collection format separator strategies.
 * @enum {String}
 * @readonly
 */
ApiClient.CollectionFormatEnum = {
    /**
     * Comma-separated values. Value: <code>csv</code>
     * @const
     */
    CSV: ',',

    /**
     * Space-separated values. Value: <code>ssv</code>
     * @const
     */
    SSV: ' ',

    /**
     * Tab-separated values. Value: <code>tsv</code>
     * @const
     */
    TSV: '\t',

    /**
     * Pipe(|)-separated values. Value: <code>pipes</code>
     * @const
     */
    PIPES: '|',

    /**
     * Native array. Value: <code>multi</code>
     * @const
     */
    MULTI: 'multi'
};

/**
* The default API client implementation.
* @type {module:ApiClient}
*/
ApiClient.instance = new ApiClient();
// Create default instance
ApiClient.instance = new ApiClient();

// Make available globally
if (typeof window !== 'undefined') {
    window.ApiClient = ApiClient;
}
